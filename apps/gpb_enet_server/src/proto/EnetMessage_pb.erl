%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.16.0
-module('EnetMessage_pb').

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("EnetMessage_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'ReliableClientMessage'() :: #'ReliableClientMessage'{}.

-type 'JoinGame'() :: #'JoinGame'{}.

-type 'ReliableServerMessage'() :: #'ReliableServerMessage'{}.

-type 'JoinGameAccepted'() :: #'JoinGameAccepted'{}.

-type 'UnreliableClientMessage'() :: #'UnreliableClientMessage'{}.

-type 'ClientInfo'() :: #'ClientInfo'{}.

-type 'UnreliableServerMessage'() :: #'UnreliableServerMessage'{}.

-type 'ServerInfo'() :: #'ServerInfo'{}.

-type 'PlayerStatus'() :: #'PlayerStatus'{}.

-type 'NewPlayer'() :: #'NewPlayer'{}.

-export_type(['ReliableClientMessage'/0, 'JoinGame'/0, 'ReliableServerMessage'/0, 'JoinGameAccepted'/0, 'UnreliableClientMessage'/0, 'ClientInfo'/0, 'UnreliableServerMessage'/0, 'ServerInfo'/0, 'PlayerStatus'/0, 'NewPlayer'/0]).

-spec encode_msg(#'ReliableClientMessage'{} | #'JoinGame'{} | #'ReliableServerMessage'{} | #'JoinGameAccepted'{} | #'UnreliableClientMessage'{} | #'ClientInfo'{} | #'UnreliableServerMessage'{} | #'ServerInfo'{} | #'PlayerStatus'{} | #'NewPlayer'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'ReliableClientMessage'{} | #'JoinGame'{} | #'ReliableServerMessage'{} | #'JoinGameAccepted'{} | #'UnreliableClientMessage'{} | #'ClientInfo'{} | #'UnreliableServerMessage'{} | #'ServerInfo'{} | #'PlayerStatus'{} | #'NewPlayer'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'ReliableClientMessage'{} | #'JoinGame'{} | #'ReliableServerMessage'{} | #'JoinGameAccepted'{} | #'UnreliableClientMessage'{} | #'ClientInfo'{} | #'UnreliableServerMessage'{} | #'ServerInfo'{} | #'PlayerStatus'{} | #'NewPlayer'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ReliableClientMessage' -> encode_msg_ReliableClientMessage(id(Msg, TrUserData), TrUserData);
        'JoinGame' -> encode_msg_JoinGame(id(Msg, TrUserData), TrUserData);
        'ReliableServerMessage' -> encode_msg_ReliableServerMessage(id(Msg, TrUserData), TrUserData);
        'JoinGameAccepted' -> encode_msg_JoinGameAccepted(id(Msg, TrUserData), TrUserData);
        'UnreliableClientMessage' -> encode_msg_UnreliableClientMessage(id(Msg, TrUserData), TrUserData);
        'ClientInfo' -> encode_msg_ClientInfo(id(Msg, TrUserData), TrUserData);
        'UnreliableServerMessage' -> encode_msg_UnreliableServerMessage(id(Msg, TrUserData), TrUserData);
        'ServerInfo' -> encode_msg_ServerInfo(id(Msg, TrUserData), TrUserData);
        'PlayerStatus' -> encode_msg_PlayerStatus(id(Msg, TrUserData), TrUserData);
        'NewPlayer' -> encode_msg_NewPlayer(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_ReliableClientMessage(Msg, TrUserData) -> encode_msg_ReliableClientMessage(Msg, <<>>, TrUserData).


encode_msg_ReliableClientMessage(#'ReliableClientMessage'{content = F1}, Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true -> case id(F1, TrUserData) of {joinGame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_ReliableClientMessage_joinGame(TrTF1, <<Bin/binary, 10>>, TrUserData) end end
    end.

encode_msg_JoinGame(Msg, TrUserData) -> encode_msg_JoinGame(Msg, <<>>, TrUserData).


encode_msg_JoinGame(#'JoinGame'{name = F1, info = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= undefined -> B1;
                  true -> e_mfield_JoinGame_info(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_ReliableServerMessage(Msg, TrUserData) -> encode_msg_ReliableServerMessage(Msg, <<>>, TrUserData).


encode_msg_ReliableServerMessage(#'ReliableServerMessage'{content = F1}, Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true -> case id(F1, TrUserData) of {joinGameAccepted, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_ReliableServerMessage_joinGameAccepted(TrTF1, <<Bin/binary, 10>>, TrUserData) end end
    end.

encode_msg_JoinGameAccepted(Msg, TrUserData) -> encode_msg_JoinGameAccepted(Msg, <<>>, TrUserData).


encode_msg_JoinGameAccepted(#'JoinGameAccepted'{id = F1, frame = F2, players = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_JoinGameAccepted_players(TrF3, B2, TrUserData)
        end
    end.

encode_msg_UnreliableClientMessage(Msg, TrUserData) -> encode_msg_UnreliableClientMessage(Msg, <<>>, TrUserData).


encode_msg_UnreliableClientMessage(#'UnreliableClientMessage'{frame = F1, ack = F2, infos = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_UnreliableClientMessage_infos(TrF3, B2, TrUserData)
        end
    end.

encode_msg_ClientInfo(Msg, TrUserData) -> encode_msg_ClientInfo(Msg, <<>>, TrUserData).


encode_msg_ClientInfo(#'ClientInfo'{x = F1, y = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_sint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_type_sint(TrF2, <<B1/binary, 16>>, TrUserData)
               end
           end
    end.

encode_msg_UnreliableServerMessage(Msg, TrUserData) -> encode_msg_UnreliableServerMessage(Msg, <<>>, TrUserData).


encode_msg_UnreliableServerMessage(#'UnreliableServerMessage'{frame = F1, ack = F2, infos = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_UnreliableServerMessage_infos(TrF3, B2, TrUserData)
        end
    end.

encode_msg_ServerInfo(Msg, TrUserData) -> encode_msg_ServerInfo(Msg, <<>>, TrUserData).


encode_msg_ServerInfo(#'ServerInfo'{players = F1, removedPlayers = F2, addedPlayers = F3}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_ServerInfo_players(TrF1, Bin, TrUserData)
             end
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true -> e_field_ServerInfo_removedPlayers(TrF2, B1, TrUserData)
             end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_ServerInfo_addedPlayers(TrF3, B2, TrUserData)
        end
    end.

encode_msg_PlayerStatus(Msg, TrUserData) -> encode_msg_PlayerStatus(Msg, <<>>, TrUserData).


encode_msg_PlayerStatus(#'PlayerStatus'{id = F1, x = F2, y = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_type_sint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 0 -> B2;
                  true -> e_type_sint(TrF3, <<B2/binary, 24>>, TrUserData)
               end
           end
    end.

encode_msg_NewPlayer(Msg, TrUserData) -> encode_msg_NewPlayer(Msg, <<>>, TrUserData).


encode_msg_NewPlayer(#'NewPlayer'{name = F1, status = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= undefined -> B1;
                  true -> e_mfield_NewPlayer_status(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

e_mfield_ReliableClientMessage_joinGame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_JoinGame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_JoinGame_info(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ClientInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ReliableServerMessage_joinGameAccepted(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_JoinGameAccepted(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_JoinGameAccepted_players(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_PlayerStatus(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_JoinGameAccepted_players([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_JoinGameAccepted_players(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_JoinGameAccepted_players(Rest, Bin3, TrUserData);
e_field_JoinGameAccepted_players([], Bin, _TrUserData) -> Bin.

e_mfield_UnreliableClientMessage_infos(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ClientInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_UnreliableClientMessage_infos([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_UnreliableClientMessage_infos(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UnreliableClientMessage_infos(Rest, Bin3, TrUserData);
e_field_UnreliableClientMessage_infos([], Bin, _TrUserData) -> Bin.

e_mfield_UnreliableServerMessage_infos(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ServerInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_UnreliableServerMessage_infos([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_UnreliableServerMessage_infos(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UnreliableServerMessage_infos(Rest, Bin3, TrUserData);
e_field_UnreliableServerMessage_infos([], Bin, _TrUserData) -> Bin.

e_mfield_ServerInfo_players(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_PlayerStatus(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ServerInfo_players([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ServerInfo_players(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ServerInfo_players(Rest, Bin3, TrUserData);
e_field_ServerInfo_players([], Bin, _TrUserData) -> Bin.

e_field_ServerInfo_removedPlayers(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_ServerInfo_removedPlayers(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_ServerInfo_removedPlayers([], Bin, _TrUserData) -> Bin.

e_pfield_ServerInfo_removedPlayers([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_ServerInfo_removedPlayers(Rest, Bin2, TrUserData);
e_pfield_ServerInfo_removedPlayers([], Bin, _TrUserData) -> Bin.

e_mfield_ServerInfo_addedPlayers(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_NewPlayer(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ServerInfo_addedPlayers([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_ServerInfo_addedPlayers(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ServerInfo_addedPlayers(Rest, Bin3, TrUserData);
e_field_ServerInfo_addedPlayers([], Bin, _TrUserData) -> Bin.

e_mfield_NewPlayer_status(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_PlayerStatus(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ReliableClientMessage', Bin, TrUserData) -> id(decode_msg_ReliableClientMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('JoinGame', Bin, TrUserData) -> id(decode_msg_JoinGame(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ReliableServerMessage', Bin, TrUserData) -> id(decode_msg_ReliableServerMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('JoinGameAccepted', Bin, TrUserData) -> id(decode_msg_JoinGameAccepted(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UnreliableClientMessage', Bin, TrUserData) -> id(decode_msg_UnreliableClientMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ClientInfo', Bin, TrUserData) -> id(decode_msg_ClientInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UnreliableServerMessage', Bin, TrUserData) -> id(decode_msg_UnreliableServerMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ServerInfo', Bin, TrUserData) -> id(decode_msg_ServerInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PlayerStatus', Bin, TrUserData) -> id(decode_msg_PlayerStatus(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NewPlayer', Bin, TrUserData) -> id(decode_msg_NewPlayer(Bin, TrUserData), TrUserData).



decode_msg_ReliableClientMessage(Bin, TrUserData) -> dfp_read_field_def_ReliableClientMessage(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ReliableClientMessage(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ReliableClientMessage_joinGame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ReliableClientMessage(<<>>, 0, 0, _, F@_1, _) -> #'ReliableClientMessage'{content = F@_1};
dfp_read_field_def_ReliableClientMessage(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ReliableClientMessage(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ReliableClientMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ReliableClientMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ReliableClientMessage(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ReliableClientMessage_joinGame(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ReliableClientMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ReliableClientMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ReliableClientMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ReliableClientMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ReliableClientMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ReliableClientMessage(<<>>, 0, 0, _, F@_1, _) -> #'ReliableClientMessage'{content = F@_1}.

d_field_ReliableClientMessage_joinGame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ReliableClientMessage_joinGame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ReliableClientMessage_joinGame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_JoinGame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ReliableClientMessage(RestF,
                                             0,
                                             0,
                                             F,
                                             case Prev of
                                                 undefined -> id({joinGame, NewFValue}, TrUserData);
                                                 {joinGame, MVPrev} -> id({joinGame, merge_msg_JoinGame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                 _ -> id({joinGame, NewFValue}, TrUserData)
                                             end,
                                             TrUserData).

skip_varint_ReliableClientMessage(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ReliableClientMessage(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ReliableClientMessage(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ReliableClientMessage(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ReliableClientMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ReliableClientMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ReliableClientMessage(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReliableClientMessage(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ReliableClientMessage(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReliableClientMessage(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ReliableClientMessage(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ReliableClientMessage(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ReliableClientMessage(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ReliableClientMessage(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_JoinGame(Bin, TrUserData) -> dfp_read_field_def_JoinGame(Bin, 0, 0, 0, id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_JoinGame(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_JoinGame_name(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_JoinGame(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_JoinGame_info(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_JoinGame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'JoinGame'{name = F@_1, info = F@_2};
dfp_read_field_def_JoinGame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_JoinGame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_JoinGame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_JoinGame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_JoinGame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_JoinGame_name(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_JoinGame_info(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_JoinGame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_JoinGame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_JoinGame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_JoinGame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_JoinGame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_JoinGame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'JoinGame'{name = F@_1, info = F@_2}.

d_field_JoinGame_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_JoinGame_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_JoinGame_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_JoinGame(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_JoinGame_info(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_JoinGame_info(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_JoinGame_info(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_ClientInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_JoinGame(RestF,
                                0,
                                0,
                                F,
                                F@_1,
                                if Prev == undefined -> NewFValue;
                                   true -> merge_msg_ClientInfo(Prev, NewFValue, TrUserData)
                                end,
                                TrUserData).

skip_varint_JoinGame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_JoinGame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_JoinGame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_JoinGame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_JoinGame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_JoinGame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_JoinGame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_JoinGame(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_JoinGame(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_JoinGame(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_JoinGame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_JoinGame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_JoinGame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_JoinGame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_ReliableServerMessage(Bin, TrUserData) -> dfp_read_field_def_ReliableServerMessage(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ReliableServerMessage(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ReliableServerMessage_joinGameAccepted(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ReliableServerMessage(<<>>, 0, 0, _, F@_1, _) -> #'ReliableServerMessage'{content = F@_1};
dfp_read_field_def_ReliableServerMessage(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ReliableServerMessage(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ReliableServerMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ReliableServerMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ReliableServerMessage(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ReliableServerMessage_joinGameAccepted(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ReliableServerMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ReliableServerMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ReliableServerMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ReliableServerMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ReliableServerMessage(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ReliableServerMessage(<<>>, 0, 0, _, F@_1, _) -> #'ReliableServerMessage'{content = F@_1}.

d_field_ReliableServerMessage_joinGameAccepted(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ReliableServerMessage_joinGameAccepted(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ReliableServerMessage_joinGameAccepted(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_JoinGameAccepted(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ReliableServerMessage(RestF,
                                             0,
                                             0,
                                             F,
                                             case Prev of
                                                 undefined -> id({joinGameAccepted, NewFValue}, TrUserData);
                                                 {joinGameAccepted, MVPrev} -> id({joinGameAccepted, merge_msg_JoinGameAccepted(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                 _ -> id({joinGameAccepted, NewFValue}, TrUserData)
                                             end,
                                             TrUserData).

skip_varint_ReliableServerMessage(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ReliableServerMessage(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ReliableServerMessage(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ReliableServerMessage(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ReliableServerMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ReliableServerMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ReliableServerMessage(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReliableServerMessage(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ReliableServerMessage(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReliableServerMessage(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ReliableServerMessage(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ReliableServerMessage(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ReliableServerMessage(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ReliableServerMessage(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_JoinGameAccepted(Bin, TrUserData) -> dfp_read_field_def_JoinGameAccepted(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_JoinGameAccepted(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_JoinGameAccepted_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_JoinGameAccepted(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_JoinGameAccepted_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_JoinGameAccepted(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_JoinGameAccepted_players(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_JoinGameAccepted(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #'JoinGameAccepted'{id = F@_1, frame = F@_2, players = lists_reverse(R1, TrUserData)};
dfp_read_field_def_JoinGameAccepted(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_JoinGameAccepted(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_JoinGameAccepted(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_JoinGameAccepted(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_JoinGameAccepted(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_JoinGameAccepted_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_JoinGameAccepted_frame(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_JoinGameAccepted_players(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_JoinGameAccepted(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_JoinGameAccepted(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_JoinGameAccepted(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_JoinGameAccepted(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_JoinGameAccepted(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_JoinGameAccepted(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #'JoinGameAccepted'{id = F@_1, frame = F@_2, players = lists_reverse(R1, TrUserData)}.

d_field_JoinGameAccepted_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_JoinGameAccepted_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_JoinGameAccepted_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_JoinGameAccepted(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_JoinGameAccepted_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_JoinGameAccepted_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_JoinGameAccepted_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_JoinGameAccepted(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_JoinGameAccepted_players(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_JoinGameAccepted_players(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_JoinGameAccepted_players(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_PlayerStatus(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_JoinGameAccepted(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_JoinGameAccepted(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_JoinGameAccepted(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_JoinGameAccepted(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_JoinGameAccepted(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_JoinGameAccepted(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_JoinGameAccepted(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_JoinGameAccepted(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_JoinGameAccepted(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_JoinGameAccepted(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_JoinGameAccepted(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_JoinGameAccepted(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_JoinGameAccepted(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_JoinGameAccepted(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_JoinGameAccepted(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_UnreliableClientMessage(Bin, TrUserData) -> dfp_read_field_def_UnreliableClientMessage(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_UnreliableClientMessage(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_UnreliableClientMessage_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_UnreliableClientMessage(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_UnreliableClientMessage_ack(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_UnreliableClientMessage(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_UnreliableClientMessage_infos(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_UnreliableClientMessage(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #'UnreliableClientMessage'{frame = F@_1, ack = F@_2, infos = lists_reverse(R1, TrUserData)};
dfp_read_field_def_UnreliableClientMessage(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_UnreliableClientMessage(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_UnreliableClientMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_UnreliableClientMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_UnreliableClientMessage(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_UnreliableClientMessage_frame(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_UnreliableClientMessage_ack(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_UnreliableClientMessage_infos(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UnreliableClientMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_UnreliableClientMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_UnreliableClientMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_UnreliableClientMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_UnreliableClientMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_UnreliableClientMessage(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #'UnreliableClientMessage'{frame = F@_1, ack = F@_2, infos = lists_reverse(R1, TrUserData)}.

d_field_UnreliableClientMessage_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_UnreliableClientMessage_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_UnreliableClientMessage_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_UnreliableClientMessage(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_UnreliableClientMessage_ack(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_UnreliableClientMessage_ack(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_UnreliableClientMessage_ack(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_UnreliableClientMessage(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_UnreliableClientMessage_infos(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_UnreliableClientMessage_infos(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_UnreliableClientMessage_infos(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_ClientInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UnreliableClientMessage(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_UnreliableClientMessage(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_UnreliableClientMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_UnreliableClientMessage(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_UnreliableClientMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_UnreliableClientMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_UnreliableClientMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_UnreliableClientMessage(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UnreliableClientMessage(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_UnreliableClientMessage(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UnreliableClientMessage(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_UnreliableClientMessage(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_UnreliableClientMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_UnreliableClientMessage(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_UnreliableClientMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_ClientInfo(Bin, TrUserData) -> dfp_read_field_def_ClientInfo(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_ClientInfo(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_ClientInfo_x(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_ClientInfo(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_ClientInfo_y(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_ClientInfo(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'ClientInfo'{x = F@_1, y = F@_2};
dfp_read_field_def_ClientInfo(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_ClientInfo(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_ClientInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_ClientInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_ClientInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ClientInfo_x(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_ClientInfo_y(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ClientInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_ClientInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_ClientInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_ClientInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_ClientInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_ClientInfo(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'ClientInfo'{x = F@_1, y = F@_2}.

d_field_ClientInfo_x(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_ClientInfo_x(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_ClientInfo_x(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
                              ZValue = X bsl N + Acc,
                              if ZValue band 1 =:= 0 -> id(ZValue bsr 1, TrUserData);
                                 true -> id(-(ZValue + 1 bsr 1), TrUserData)
                              end
                          end,
                          Rest},
    dfp_read_field_def_ClientInfo(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_ClientInfo_y(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_ClientInfo_y(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_ClientInfo_y(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
                              ZValue = X bsl N + Acc,
                              if ZValue band 1 =:= 0 -> id(ZValue bsr 1, TrUserData);
                                 true -> id(-(ZValue + 1 bsr 1), TrUserData)
                              end
                          end,
                          Rest},
    dfp_read_field_def_ClientInfo(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_ClientInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_ClientInfo(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_ClientInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_ClientInfo(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_ClientInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_ClientInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_ClientInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ClientInfo(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_ClientInfo(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ClientInfo(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_ClientInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_ClientInfo(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_ClientInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_ClientInfo(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_UnreliableServerMessage(Bin, TrUserData) -> dfp_read_field_def_UnreliableServerMessage(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_UnreliableServerMessage(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_UnreliableServerMessage_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_UnreliableServerMessage(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_UnreliableServerMessage_ack(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_UnreliableServerMessage(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_UnreliableServerMessage_infos(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_UnreliableServerMessage(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #'UnreliableServerMessage'{frame = F@_1, ack = F@_2, infos = lists_reverse(R1, TrUserData)};
dfp_read_field_def_UnreliableServerMessage(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_UnreliableServerMessage(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_UnreliableServerMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_UnreliableServerMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_UnreliableServerMessage(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_UnreliableServerMessage_frame(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_UnreliableServerMessage_ack(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_UnreliableServerMessage_infos(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UnreliableServerMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_UnreliableServerMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_UnreliableServerMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_UnreliableServerMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_UnreliableServerMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_UnreliableServerMessage(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #'UnreliableServerMessage'{frame = F@_1, ack = F@_2, infos = lists_reverse(R1, TrUserData)}.

d_field_UnreliableServerMessage_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_UnreliableServerMessage_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_UnreliableServerMessage_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_UnreliableServerMessage(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_UnreliableServerMessage_ack(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_UnreliableServerMessage_ack(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_UnreliableServerMessage_ack(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_UnreliableServerMessage(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_UnreliableServerMessage_infos(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_UnreliableServerMessage_infos(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_UnreliableServerMessage_infos(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_ServerInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UnreliableServerMessage(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_UnreliableServerMessage(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_UnreliableServerMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_UnreliableServerMessage(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_UnreliableServerMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_UnreliableServerMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_UnreliableServerMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_UnreliableServerMessage(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UnreliableServerMessage(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_UnreliableServerMessage(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UnreliableServerMessage(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_UnreliableServerMessage(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_UnreliableServerMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_UnreliableServerMessage(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_UnreliableServerMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_ServerInfo(Bin, TrUserData) -> dfp_read_field_def_ServerInfo(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_ServerInfo(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_ServerInfo_players(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ServerInfo(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_pfield_ServerInfo_removedPlayers(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ServerInfo(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_ServerInfo_removedPlayers(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ServerInfo(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_ServerInfo_addedPlayers(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ServerInfo(<<>>, 0, 0, _, R1, R2, R3, TrUserData) -> #'ServerInfo'{players = lists_reverse(R1, TrUserData), removedPlayers = lists_reverse(R2, TrUserData), addedPlayers = lists_reverse(R3, TrUserData)};
dfp_read_field_def_ServerInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_ServerInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_ServerInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_ServerInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_ServerInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ServerInfo_players(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_pfield_ServerInfo_removedPlayers(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_ServerInfo_removedPlayers(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_ServerInfo_addedPlayers(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ServerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_ServerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_ServerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_ServerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_ServerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_ServerInfo(<<>>, 0, 0, _, R1, R2, R3, TrUserData) -> #'ServerInfo'{players = lists_reverse(R1, TrUserData), removedPlayers = lists_reverse(R2, TrUserData), addedPlayers = lists_reverse(R3, TrUserData)}.

d_field_ServerInfo_players(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_ServerInfo_players(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_ServerInfo_players(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_PlayerStatus(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ServerInfo(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, F@_3, TrUserData).

d_field_ServerInfo_removedPlayers(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_ServerInfo_removedPlayers(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_ServerInfo_removedPlayers(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_ServerInfo(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), F@_3, TrUserData).

d_pfield_ServerInfo_removedPlayers(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_pfield_ServerInfo_removedPlayers(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_pfield_ServerInfo_removedPlayers(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, E, F@_3, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_ServerInfo_removedPlayers(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_ServerInfo(Rest2, 0, 0, F, F@_1, NewSeq, F@_3, TrUserData).

d_packed_field_ServerInfo_removedPlayers(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_ServerInfo_removedPlayers(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_ServerInfo_removedPlayers(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_ServerInfo_removedPlayers(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_ServerInfo_removedPlayers(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_ServerInfo_addedPlayers(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_ServerInfo_addedPlayers(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_ServerInfo_addedPlayers(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_NewPlayer(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ServerInfo(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_ServerInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_ServerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_ServerInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_ServerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_ServerInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_ServerInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_ServerInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerInfo(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_ServerInfo(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerInfo(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_ServerInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_ServerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_ServerInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_ServerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_PlayerStatus(Bin, TrUserData) -> dfp_read_field_def_PlayerStatus(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_PlayerStatus(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PlayerStatus_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PlayerStatus(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PlayerStatus_x(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PlayerStatus(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PlayerStatus_y(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PlayerStatus(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'PlayerStatus'{id = F@_1, x = F@_2, y = F@_3};
dfp_read_field_def_PlayerStatus(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_PlayerStatus(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_PlayerStatus(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_PlayerStatus(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_PlayerStatus(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_PlayerStatus_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_PlayerStatus_x(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_PlayerStatus_y(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PlayerStatus(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_PlayerStatus(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_PlayerStatus(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_PlayerStatus(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_PlayerStatus(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_PlayerStatus(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'PlayerStatus'{id = F@_1, x = F@_2, y = F@_3}.

d_field_PlayerStatus_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PlayerStatus_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PlayerStatus_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_PlayerStatus(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_PlayerStatus_x(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PlayerStatus_x(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PlayerStatus_x(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
                              ZValue = X bsl N + Acc,
                              if ZValue band 1 =:= 0 -> id(ZValue bsr 1, TrUserData);
                                 true -> id(-(ZValue + 1 bsr 1), TrUserData)
                              end
                          end,
                          Rest},
    dfp_read_field_def_PlayerStatus(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_PlayerStatus_y(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PlayerStatus_y(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PlayerStatus_y(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
                              ZValue = X bsl N + Acc,
                              if ZValue band 1 =:= 0 -> id(ZValue bsr 1, TrUserData);
                                 true -> id(-(ZValue + 1 bsr 1), TrUserData)
                              end
                          end,
                          Rest},
    dfp_read_field_def_PlayerStatus(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_PlayerStatus(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_PlayerStatus(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_PlayerStatus(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PlayerStatus(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_PlayerStatus(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_PlayerStatus(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_PlayerStatus(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayerStatus(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_PlayerStatus(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayerStatus(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_PlayerStatus(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PlayerStatus(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_PlayerStatus(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PlayerStatus(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_NewPlayer(Bin, TrUserData) -> dfp_read_field_def_NewPlayer(Bin, 0, 0, 0, id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_NewPlayer(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_NewPlayer_name(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_NewPlayer(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_NewPlayer_status(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_NewPlayer(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'NewPlayer'{name = F@_1, status = F@_2};
dfp_read_field_def_NewPlayer(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_NewPlayer(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_NewPlayer(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_NewPlayer(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_NewPlayer(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_NewPlayer_name(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_NewPlayer_status(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_NewPlayer(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_NewPlayer(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_NewPlayer(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_NewPlayer(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_NewPlayer(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_NewPlayer(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'NewPlayer'{name = F@_1, status = F@_2}.

d_field_NewPlayer_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_NewPlayer_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_NewPlayer_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_NewPlayer(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_NewPlayer_status(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_NewPlayer_status(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_NewPlayer_status(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_PlayerStatus(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_NewPlayer(RestF,
                                 0,
                                 0,
                                 F,
                                 F@_1,
                                 if Prev == undefined -> NewFValue;
                                    true -> merge_msg_PlayerStatus(Prev, NewFValue, TrUserData)
                                 end,
                                 TrUserData).

skip_varint_NewPlayer(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_NewPlayer(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_NewPlayer(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_NewPlayer(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_NewPlayer(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_NewPlayer(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_NewPlayer(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NewPlayer(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_NewPlayer(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NewPlayer(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_NewPlayer(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_NewPlayer(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_NewPlayer(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_NewPlayer(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ReliableClientMessage' -> merge_msg_ReliableClientMessage(Prev, New, TrUserData);
        'JoinGame' -> merge_msg_JoinGame(Prev, New, TrUserData);
        'ReliableServerMessage' -> merge_msg_ReliableServerMessage(Prev, New, TrUserData);
        'JoinGameAccepted' -> merge_msg_JoinGameAccepted(Prev, New, TrUserData);
        'UnreliableClientMessage' -> merge_msg_UnreliableClientMessage(Prev, New, TrUserData);
        'ClientInfo' -> merge_msg_ClientInfo(Prev, New, TrUserData);
        'UnreliableServerMessage' -> merge_msg_UnreliableServerMessage(Prev, New, TrUserData);
        'ServerInfo' -> merge_msg_ServerInfo(Prev, New, TrUserData);
        'PlayerStatus' -> merge_msg_PlayerStatus(Prev, New, TrUserData);
        'NewPlayer' -> merge_msg_NewPlayer(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_ReliableClientMessage/3}).
merge_msg_ReliableClientMessage(#'ReliableClientMessage'{content = PFcontent}, #'ReliableClientMessage'{content = NFcontent}, TrUserData) ->
    #'ReliableClientMessage'{content =
                                 case {PFcontent, NFcontent} of
                                     {{joinGame, OPFcontent}, {joinGame, ONFcontent}} -> {joinGame, merge_msg_JoinGame(OPFcontent, ONFcontent, TrUserData)};
                                     {_, undefined} -> PFcontent;
                                     _ -> NFcontent
                                 end}.

-compile({nowarn_unused_function,merge_msg_JoinGame/3}).
merge_msg_JoinGame(#'JoinGame'{name = PFname, info = PFinfo}, #'JoinGame'{name = NFname, info = NFinfo}, TrUserData) ->
    #'JoinGame'{name =
                    if NFname =:= undefined -> PFname;
                       true -> NFname
                    end,
                info =
                    if PFinfo /= undefined, NFinfo /= undefined -> merge_msg_ClientInfo(PFinfo, NFinfo, TrUserData);
                       PFinfo == undefined -> NFinfo;
                       NFinfo == undefined -> PFinfo
                    end}.

-compile({nowarn_unused_function,merge_msg_ReliableServerMessage/3}).
merge_msg_ReliableServerMessage(#'ReliableServerMessage'{content = PFcontent}, #'ReliableServerMessage'{content = NFcontent}, TrUserData) ->
    #'ReliableServerMessage'{content =
                                 case {PFcontent, NFcontent} of
                                     {{joinGameAccepted, OPFcontent}, {joinGameAccepted, ONFcontent}} -> {joinGameAccepted, merge_msg_JoinGameAccepted(OPFcontent, ONFcontent, TrUserData)};
                                     {_, undefined} -> PFcontent;
                                     _ -> NFcontent
                                 end}.

-compile({nowarn_unused_function,merge_msg_JoinGameAccepted/3}).
merge_msg_JoinGameAccepted(#'JoinGameAccepted'{id = PFid, frame = PFframe, players = PFplayers}, #'JoinGameAccepted'{id = NFid, frame = NFframe, players = NFplayers}, TrUserData) ->
    #'JoinGameAccepted'{id =
                            if NFid =:= undefined -> PFid;
                               true -> NFid
                            end,
                        frame =
                            if NFframe =:= undefined -> PFframe;
                               true -> NFframe
                            end,
                        players =
                            if PFplayers /= undefined, NFplayers /= undefined -> 'erlang_++'(PFplayers, NFplayers, TrUserData);
                               PFplayers == undefined -> NFplayers;
                               NFplayers == undefined -> PFplayers
                            end}.

-compile({nowarn_unused_function,merge_msg_UnreliableClientMessage/3}).
merge_msg_UnreliableClientMessage(#'UnreliableClientMessage'{frame = PFframe, ack = PFack, infos = PFinfos}, #'UnreliableClientMessage'{frame = NFframe, ack = NFack, infos = NFinfos}, TrUserData) ->
    #'UnreliableClientMessage'{frame =
                                   if NFframe =:= undefined -> PFframe;
                                      true -> NFframe
                                   end,
                               ack =
                                   if NFack =:= undefined -> PFack;
                                      true -> NFack
                                   end,
                               infos =
                                   if PFinfos /= undefined, NFinfos /= undefined -> 'erlang_++'(PFinfos, NFinfos, TrUserData);
                                      PFinfos == undefined -> NFinfos;
                                      NFinfos == undefined -> PFinfos
                                   end}.

-compile({nowarn_unused_function,merge_msg_ClientInfo/3}).
merge_msg_ClientInfo(#'ClientInfo'{x = PFx, y = PFy}, #'ClientInfo'{x = NFx, y = NFy}, _) ->
    #'ClientInfo'{x =
                      if NFx =:= undefined -> PFx;
                         true -> NFx
                      end,
                  y =
                      if NFy =:= undefined -> PFy;
                         true -> NFy
                      end}.

-compile({nowarn_unused_function,merge_msg_UnreliableServerMessage/3}).
merge_msg_UnreliableServerMessage(#'UnreliableServerMessage'{frame = PFframe, ack = PFack, infos = PFinfos}, #'UnreliableServerMessage'{frame = NFframe, ack = NFack, infos = NFinfos}, TrUserData) ->
    #'UnreliableServerMessage'{frame =
                                   if NFframe =:= undefined -> PFframe;
                                      true -> NFframe
                                   end,
                               ack =
                                   if NFack =:= undefined -> PFack;
                                      true -> NFack
                                   end,
                               infos =
                                   if PFinfos /= undefined, NFinfos /= undefined -> 'erlang_++'(PFinfos, NFinfos, TrUserData);
                                      PFinfos == undefined -> NFinfos;
                                      NFinfos == undefined -> PFinfos
                                   end}.

-compile({nowarn_unused_function,merge_msg_ServerInfo/3}).
merge_msg_ServerInfo(#'ServerInfo'{players = PFplayers, removedPlayers = PFremovedPlayers, addedPlayers = PFaddedPlayers}, #'ServerInfo'{players = NFplayers, removedPlayers = NFremovedPlayers, addedPlayers = NFaddedPlayers}, TrUserData) ->
    #'ServerInfo'{players =
                      if PFplayers /= undefined, NFplayers /= undefined -> 'erlang_++'(PFplayers, NFplayers, TrUserData);
                         PFplayers == undefined -> NFplayers;
                         NFplayers == undefined -> PFplayers
                      end,
                  removedPlayers =
                      if PFremovedPlayers /= undefined, NFremovedPlayers /= undefined -> 'erlang_++'(PFremovedPlayers, NFremovedPlayers, TrUserData);
                         PFremovedPlayers == undefined -> NFremovedPlayers;
                         NFremovedPlayers == undefined -> PFremovedPlayers
                      end,
                  addedPlayers =
                      if PFaddedPlayers /= undefined, NFaddedPlayers /= undefined -> 'erlang_++'(PFaddedPlayers, NFaddedPlayers, TrUserData);
                         PFaddedPlayers == undefined -> NFaddedPlayers;
                         NFaddedPlayers == undefined -> PFaddedPlayers
                      end}.

-compile({nowarn_unused_function,merge_msg_PlayerStatus/3}).
merge_msg_PlayerStatus(#'PlayerStatus'{id = PFid, x = PFx, y = PFy}, #'PlayerStatus'{id = NFid, x = NFx, y = NFy}, _) ->
    #'PlayerStatus'{id =
                        if NFid =:= undefined -> PFid;
                           true -> NFid
                        end,
                    x =
                        if NFx =:= undefined -> PFx;
                           true -> NFx
                        end,
                    y =
                        if NFy =:= undefined -> PFy;
                           true -> NFy
                        end}.

-compile({nowarn_unused_function,merge_msg_NewPlayer/3}).
merge_msg_NewPlayer(#'NewPlayer'{name = PFname, status = PFstatus}, #'NewPlayer'{name = NFname, status = NFstatus}, TrUserData) ->
    #'NewPlayer'{name =
                     if NFname =:= undefined -> PFname;
                        true -> NFname
                     end,
                 status =
                     if PFstatus /= undefined, NFstatus /= undefined -> merge_msg_PlayerStatus(PFstatus, NFstatus, TrUserData);
                        PFstatus == undefined -> NFstatus;
                        NFstatus == undefined -> PFstatus
                     end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ReliableClientMessage' -> v_msg_ReliableClientMessage(Msg, [MsgName], TrUserData);
        'JoinGame' -> v_msg_JoinGame(Msg, [MsgName], TrUserData);
        'ReliableServerMessage' -> v_msg_ReliableServerMessage(Msg, [MsgName], TrUserData);
        'JoinGameAccepted' -> v_msg_JoinGameAccepted(Msg, [MsgName], TrUserData);
        'UnreliableClientMessage' -> v_msg_UnreliableClientMessage(Msg, [MsgName], TrUserData);
        'ClientInfo' -> v_msg_ClientInfo(Msg, [MsgName], TrUserData);
        'UnreliableServerMessage' -> v_msg_UnreliableServerMessage(Msg, [MsgName], TrUserData);
        'ServerInfo' -> v_msg_ServerInfo(Msg, [MsgName], TrUserData);
        'PlayerStatus' -> v_msg_PlayerStatus(Msg, [MsgName], TrUserData);
        'NewPlayer' -> v_msg_NewPlayer(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_ReliableClientMessage/3}).
-dialyzer({nowarn_function,v_msg_ReliableClientMessage/3}).
v_msg_ReliableClientMessage(#'ReliableClientMessage'{content = F1}, Path, TrUserData) ->
    case F1 of
        undefined -> ok;
        {joinGame, OF1} -> v_msg_JoinGame(OF1, [joinGame, content | Path], TrUserData);
        _ -> mk_type_error(invalid_oneof, F1, [content | Path])
    end,
    ok;
v_msg_ReliableClientMessage(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ReliableClientMessage'}, X, Path).

-compile({nowarn_unused_function,v_msg_JoinGame/3}).
-dialyzer({nowarn_function,v_msg_JoinGame/3}).
v_msg_JoinGame(#'JoinGame'{name = F1, info = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_ClientInfo(F2, [info | Path], TrUserData)
    end,
    ok;
v_msg_JoinGame(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'JoinGame'}, X, Path).

-compile({nowarn_unused_function,v_msg_ReliableServerMessage/3}).
-dialyzer({nowarn_function,v_msg_ReliableServerMessage/3}).
v_msg_ReliableServerMessage(#'ReliableServerMessage'{content = F1}, Path, TrUserData) ->
    case F1 of
        undefined -> ok;
        {joinGameAccepted, OF1} -> v_msg_JoinGameAccepted(OF1, [joinGameAccepted, content | Path], TrUserData);
        _ -> mk_type_error(invalid_oneof, F1, [content | Path])
    end,
    ok;
v_msg_ReliableServerMessage(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ReliableServerMessage'}, X, Path).

-compile({nowarn_unused_function,v_msg_JoinGameAccepted/3}).
-dialyzer({nowarn_function,v_msg_JoinGameAccepted/3}).
v_msg_JoinGameAccepted(#'JoinGameAccepted'{id = F1, frame = F2, players = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [frame | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_PlayerStatus(Elem, [players | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'PlayerStatus'}}, F3, [players | Path])
    end,
    ok;
v_msg_JoinGameAccepted(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'JoinGameAccepted'}, X, Path).

-compile({nowarn_unused_function,v_msg_UnreliableClientMessage/3}).
-dialyzer({nowarn_function,v_msg_UnreliableClientMessage/3}).
v_msg_UnreliableClientMessage(#'UnreliableClientMessage'{frame = F1, ack = F2, infos = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [frame | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ack | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_ClientInfo(Elem, [infos | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'ClientInfo'}}, F3, [infos | Path])
    end,
    ok;
v_msg_UnreliableClientMessage(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UnreliableClientMessage'}, X, Path).

-compile({nowarn_unused_function,v_msg_ClientInfo/3}).
-dialyzer({nowarn_function,v_msg_ClientInfo/3}).
v_msg_ClientInfo(#'ClientInfo'{x = F1, y = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_sint32(F1, [x | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_sint32(F2, [y | Path], TrUserData)
    end,
    ok;
v_msg_ClientInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ClientInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_UnreliableServerMessage/3}).
-dialyzer({nowarn_function,v_msg_UnreliableServerMessage/3}).
v_msg_UnreliableServerMessage(#'UnreliableServerMessage'{frame = F1, ack = F2, infos = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [frame | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ack | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_ServerInfo(Elem, [infos | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'ServerInfo'}}, F3, [infos | Path])
    end,
    ok;
v_msg_UnreliableServerMessage(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UnreliableServerMessage'}, X, Path).

-compile({nowarn_unused_function,v_msg_ServerInfo/3}).
-dialyzer({nowarn_function,v_msg_ServerInfo/3}).
v_msg_ServerInfo(#'ServerInfo'{players = F1, removedPlayers = F2, addedPlayers = F3}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_PlayerStatus(Elem, [players | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'PlayerStatus'}}, F1, [players | Path])
    end,
    if is_list(F2) ->
           _ = [v_type_int32(Elem, [removedPlayers | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, int32}, F2, [removedPlayers | Path])
    end,
    if is_list(F3) ->
           _ = [v_msg_NewPlayer(Elem, [addedPlayers | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'NewPlayer'}}, F3, [addedPlayers | Path])
    end,
    ok;
v_msg_ServerInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ServerInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_PlayerStatus/3}).
-dialyzer({nowarn_function,v_msg_PlayerStatus/3}).
v_msg_PlayerStatus(#'PlayerStatus'{id = F1, x = F2, y = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_sint32(F2, [x | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_sint32(F3, [y | Path], TrUserData)
    end,
    ok;
v_msg_PlayerStatus(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PlayerStatus'}, X, Path).

-compile({nowarn_unused_function,v_msg_NewPlayer/3}).
-dialyzer({nowarn_function,v_msg_NewPlayer/3}).
v_msg_NewPlayer(#'NewPlayer'{name = F1, status = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_PlayerStatus(F2, [status | Path], TrUserData)
    end,
    ok;
v_msg_NewPlayer(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'NewPlayer'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sint32, signed, 32}, N, Path);
v_type_sint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sint32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, 'ReliableClientMessage'}, [#gpb_oneof{name = content, rnum = 2, fields = [#field{name = joinGame, fnum = 1, rnum = 2, type = {msg, 'JoinGame'}, occurrence = optional, opts = []}]}]},
     {{msg, 'JoinGame'}, [#field{name = name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = info, fnum = 2, rnum = 3, type = {msg, 'ClientInfo'}, occurrence = optional, opts = []}]},
     {{msg, 'ReliableServerMessage'}, [#gpb_oneof{name = content, rnum = 2, fields = [#field{name = joinGameAccepted, fnum = 1, rnum = 2, type = {msg, 'JoinGameAccepted'}, occurrence = optional, opts = []}]}]},
     {{msg, 'JoinGameAccepted'},
      [#field{name = id, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []},
       #field{name = frame, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []},
       #field{name = players, fnum = 3, rnum = 4, type = {msg, 'PlayerStatus'}, occurrence = repeated, opts = []}]},
     {{msg, 'UnreliableClientMessage'},
      [#field{name = frame, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = ack, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = infos, fnum = 3, rnum = 4, type = {msg, 'ClientInfo'}, occurrence = repeated, opts = []}]},
     {{msg, 'ClientInfo'}, [#field{name = x, fnum = 1, rnum = 2, type = sint32, occurrence = optional, opts = []}, #field{name = y, fnum = 2, rnum = 3, type = sint32, occurrence = optional, opts = []}]},
     {{msg, 'UnreliableServerMessage'},
      [#field{name = frame, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = ack, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = infos, fnum = 3, rnum = 4, type = {msg, 'ServerInfo'}, occurrence = repeated, opts = []}]},
     {{msg, 'ServerInfo'},
      [#field{name = players, fnum = 1, rnum = 2, type = {msg, 'PlayerStatus'}, occurrence = repeated, opts = []},
       #field{name = removedPlayers, fnum = 2, rnum = 3, type = int32, occurrence = repeated, opts = [packed]},
       #field{name = addedPlayers, fnum = 3, rnum = 4, type = {msg, 'NewPlayer'}, occurrence = repeated, opts = []}]},
     {{msg, 'PlayerStatus'},
      [#field{name = id, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []},
       #field{name = x, fnum = 2, rnum = 3, type = sint32, occurrence = optional, opts = []},
       #field{name = y, fnum = 3, rnum = 4, type = sint32, occurrence = optional, opts = []}]},
     {{msg, 'NewPlayer'}, [#field{name = name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = status, fnum = 2, rnum = 3, type = {msg, 'PlayerStatus'}, occurrence = optional, opts = []}]}].


get_msg_names() -> ['ReliableClientMessage', 'JoinGame', 'ReliableServerMessage', 'JoinGameAccepted', 'UnreliableClientMessage', 'ClientInfo', 'UnreliableServerMessage', 'ServerInfo', 'PlayerStatus', 'NewPlayer'].


get_group_names() -> [].


get_msg_or_group_names() -> ['ReliableClientMessage', 'JoinGame', 'ReliableServerMessage', 'JoinGameAccepted', 'UnreliableClientMessage', 'ClientInfo', 'UnreliableServerMessage', 'ServerInfo', 'PlayerStatus', 'NewPlayer'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def('ReliableClientMessage') -> [#gpb_oneof{name = content, rnum = 2, fields = [#field{name = joinGame, fnum = 1, rnum = 2, type = {msg, 'JoinGame'}, occurrence = optional, opts = []}]}];
find_msg_def('JoinGame') -> [#field{name = name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = info, fnum = 2, rnum = 3, type = {msg, 'ClientInfo'}, occurrence = optional, opts = []}];
find_msg_def('ReliableServerMessage') -> [#gpb_oneof{name = content, rnum = 2, fields = [#field{name = joinGameAccepted, fnum = 1, rnum = 2, type = {msg, 'JoinGameAccepted'}, occurrence = optional, opts = []}]}];
find_msg_def('JoinGameAccepted') ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []},
     #field{name = frame, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []},
     #field{name = players, fnum = 3, rnum = 4, type = {msg, 'PlayerStatus'}, occurrence = repeated, opts = []}];
find_msg_def('UnreliableClientMessage') ->
    [#field{name = frame, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = ack, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = infos, fnum = 3, rnum = 4, type = {msg, 'ClientInfo'}, occurrence = repeated, opts = []}];
find_msg_def('ClientInfo') -> [#field{name = x, fnum = 1, rnum = 2, type = sint32, occurrence = optional, opts = []}, #field{name = y, fnum = 2, rnum = 3, type = sint32, occurrence = optional, opts = []}];
find_msg_def('UnreliableServerMessage') ->
    [#field{name = frame, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = ack, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = infos, fnum = 3, rnum = 4, type = {msg, 'ServerInfo'}, occurrence = repeated, opts = []}];
find_msg_def('ServerInfo') ->
    [#field{name = players, fnum = 1, rnum = 2, type = {msg, 'PlayerStatus'}, occurrence = repeated, opts = []},
     #field{name = removedPlayers, fnum = 2, rnum = 3, type = int32, occurrence = repeated, opts = [packed]},
     #field{name = addedPlayers, fnum = 3, rnum = 4, type = {msg, 'NewPlayer'}, occurrence = repeated, opts = []}];
find_msg_def('PlayerStatus') ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []},
     #field{name = x, fnum = 2, rnum = 3, type = sint32, occurrence = optional, opts = []},
     #field{name = y, fnum = 3, rnum = 4, type = sint32, occurrence = optional, opts = []}];
find_msg_def('NewPlayer') -> [#field{name = name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = status, fnum = 2, rnum = 3, type = {msg, 'PlayerStatus'}, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ReliableClientMessage">>) -> 'ReliableClientMessage';
fqbin_to_msg_name(<<"JoinGame">>) -> 'JoinGame';
fqbin_to_msg_name(<<"ReliableServerMessage">>) -> 'ReliableServerMessage';
fqbin_to_msg_name(<<"JoinGameAccepted">>) -> 'JoinGameAccepted';
fqbin_to_msg_name(<<"UnreliableClientMessage">>) -> 'UnreliableClientMessage';
fqbin_to_msg_name(<<"ClientInfo">>) -> 'ClientInfo';
fqbin_to_msg_name(<<"UnreliableServerMessage">>) -> 'UnreliableServerMessage';
fqbin_to_msg_name(<<"ServerInfo">>) -> 'ServerInfo';
fqbin_to_msg_name(<<"PlayerStatus">>) -> 'PlayerStatus';
fqbin_to_msg_name(<<"NewPlayer">>) -> 'NewPlayer';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('ReliableClientMessage') -> <<"ReliableClientMessage">>;
msg_name_to_fqbin('JoinGame') -> <<"JoinGame">>;
msg_name_to_fqbin('ReliableServerMessage') -> <<"ReliableServerMessage">>;
msg_name_to_fqbin('JoinGameAccepted') -> <<"JoinGameAccepted">>;
msg_name_to_fqbin('UnreliableClientMessage') -> <<"UnreliableClientMessage">>;
msg_name_to_fqbin('ClientInfo') -> <<"ClientInfo">>;
msg_name_to_fqbin('UnreliableServerMessage') -> <<"UnreliableServerMessage">>;
msg_name_to_fqbin('ServerInfo') -> <<"ServerInfo">>;
msg_name_to_fqbin('PlayerStatus') -> <<"PlayerStatus">>;
msg_name_to_fqbin('NewPlayer') -> <<"NewPlayer">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "EnetMessage.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["EnetMessage.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["EnetMessage"].


get_msg_containment("EnetMessage") -> ['ClientInfo', 'JoinGame', 'JoinGameAccepted', 'NewPlayer', 'PlayerStatus', 'ReliableClientMessage', 'ReliableServerMessage', 'ServerInfo', 'UnreliableClientMessage', 'UnreliableServerMessage'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("EnetMessage") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("EnetMessage") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("EnetMessage") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("EnetMessage") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"NewPlayer">>) -> "EnetMessage";
get_proto_by_msg_name_as_fqbin(<<"PlayerStatus">>) -> "EnetMessage";
get_proto_by_msg_name_as_fqbin(<<"JoinGameAccepted">>) -> "EnetMessage";
get_proto_by_msg_name_as_fqbin(<<"UnreliableServerMessage">>) -> "EnetMessage";
get_proto_by_msg_name_as_fqbin(<<"UnreliableClientMessage">>) -> "EnetMessage";
get_proto_by_msg_name_as_fqbin(<<"ReliableServerMessage">>) -> "EnetMessage";
get_proto_by_msg_name_as_fqbin(<<"ReliableClientMessage">>) -> "EnetMessage";
get_proto_by_msg_name_as_fqbin(<<"JoinGame">>) -> "EnetMessage";
get_proto_by_msg_name_as_fqbin(<<"ServerInfo">>) -> "EnetMessage";
get_proto_by_msg_name_as_fqbin(<<"ClientInfo">>) -> "EnetMessage";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.16.0".

gpb_version_as_list() ->
    [4,16,0].
